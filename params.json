{"name":"Webber","tagline":"A lightweight HTTP Web Request Helper in C# .NET","body":"# Webber\r\n========\r\n<a href=\"https://www.nuget.org/packages/Webber\"><img src=\"https://img.shields.io/nuget/v/Webber.svg\" alt=\"NuGet Version\" /></a> \r\n<a href=\"https://www.nuget.org/packages/Webber\"><img src=\"https://img.shields.io/nuget/dt/Webber.svg\" alt=\"NuGet Download Count\" /></a>\r\n\r\n### Overview\r\nWebber is a lightweight, HTTP Web Request Helper / utility written in C#. \r\nThe idea was to have a very simple and flexible abstraction of doing HTTP requests with minimal lines of code to perform the request. \r\n\r\n### Usage\r\n####GET\r\nPerforming a GET request is as simple as \r\n```csharp\r\nvar response = Webber.Get<SamplePost>(\"http://jsonplaceholder.typicode.com/posts/1\");\r\n```\r\n\r\n####POST\r\nShoot a POST request with a wide-range of flexibility\r\n```csharp\r\n//Simple POST\r\nvar webberResponse = Webber.Post<SamplePost>(url, data);\r\n\r\n//Get flexible control on overriding the default parameters\r\nvar webberResponse = Webber.Post<Tests.SamplePost>(\r\n                url,\r\n                data,\r\n                ContentType.Json,\r\n                EncodingType.Utf8,\r\n                new NetworkCredential(\"myUserName\", \"P@ssW0rd\"),\r\n                myCustomerHeaders);\r\n```\r\n\r\n####Any HTTP Verb\r\n```csharp\r\nvar webberResponse = Webber.Invoke(\r\n                url,\r\n                data,\r\n                ContentType.Json, -- Specify the request's content-type\r\n                MethodType.Put, -- Specify the http verb here\r\n                EncodingType.Utf8, -- Specify the request's encoding type here\r\n                new NetworkCredential(\"myUserName\", \"P@ssW0rd\"), -- Add your ICrendential when necessary\r\n                myCustomerHeaders); -- Add additional headers the reqest\r\n```\r\n\r\n###Response Deserialization\r\nThese web requests' responses can be auto-deserialized from a Json. The library only has 1 dependency, that is Json.Net. Here's a good article on how Json.net is better than the built in .net serializers http://www.newtonsoft.com/json/help/html/jsonnetvsdotnetserializers.htm\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}